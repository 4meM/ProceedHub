* ProceedHub Backend

** Descripción

Este proyecto es el backend de ProceedHub que sera para la aplicación web HAMUK, esta desarrollada con Spring Boot y Gradle. Proporciona servicios RESTful para la gestión de usuarios y la seguridad de la aplicación.

** Requisitos

- Java 21 o superior
- Gradle 7.5 o superior

** Configuración del Proyecto

*** Clonar el Repositorio

#+begin_src sh
git clone https://github.com/tu-usuario/proceedhub-backend.git
cd proceedhub-backend
#+end_src

*** Construir el Proyecto

#+begin_src sh
./gradlew build
#+end_src

*** Ejecutar la Aplicación

#+begin_src sh
./gradlew bootRun
#+end_src

** Endpoints

*** UserController

**** Registrar Usuario

- URL: /api/users/register
- Método: POST
- Cuerpo de la Solicitud:

#+begin_src json
{
  "username": "string",
  "email": "string",
  "password": "string",
  "roles": ["string"]
}
#+end_src

- Respuesta Exitosa:

#+begin_src json
{
  "message": "User created successfully"
}
#+end_src

**** Iniciar Sesión

- URL: /api/users/login
- Método: POST
- Cuerpo de la Solicitud:

#+begin_src json
{
  "username": "string",
  "password": "string"
}
#+end_src

- Respuesta Exitosa:

#+begin_src json
{
  "message": "Login successful"
}
#+end_src

**** Obtener Usuario por Nombre de Usuario

- URL: /api/users/{username}
- Método: GET
- Parámetros de Ruta:
  - username (string): El nombre de usuario del usuario.

- Respuesta Exitosa:

#+begin_src json
{
  "username": "string",
  "email": "string",
  "roles": ["string"]
}
#+end_src

- Respuesta de Error:

#+begin_src json
{
  "message": "User not found"
}
#+end_src

*** ScholarshipController

**** Crear Beca

- URL: /api/scholarships/create
- Método: POST
- Cuerpo de la Solicitud:

#+begin_src json
{
  "name": "string",
  "description": "string",
  "amount": "number"
}
#+end_src

- Respuesta Exitosa:

#+begin_src json
{
  "message": "Scholarship created successfully"
}
#+end_src

**** Obtener Todas las Becas

- URL: /api/scholarships/get_all
- Método: GET
- Respuesta Exitosa:

#+begin_src json
[
  {
    "id": "integer",
    "name": "string",
    "description": "string",
    "amount": "number"
  }
]
#+end_src

**** Obtener Beca por ID

- URL: /api/scholarships/{id}
- Método: GET
- Parámetros de Ruta:
  - id (integer): El ID de la beca.

- Respuesta Exitosa:

#+begin_src json
{
  "id": "integer",
  "name": "string",
  "description": "string",
  "amount": "number"
}
#+end_src

- Respuesta de Error:

#+begin_src json
{
  "message": "Scholarship not found"
}
#+end_src

**** Actualizar Beca por ID

- URL: /api/scholarships/update/{id}
- Método: PUT
- Parámetros de Ruta:
  - id (integer): El ID de la beca.

- Cuerpo de la Solicitud:

#+begin_src json
{
  "name": "string",
  "description": "string",
  "amount": "number"
}
#+end_src

- Respuesta Exitosa:

#+begin_src json
{
  "message": "Scholarship updated successfully"
}
#+end_src

- Respuesta de Error:

#+begin_src json
{
  "message": "Scholarship not found"
}
#+end_src

**** Eliminar Beca por ID

- URL: /api/scholarships/delete/{id}
- Método: DELETE
- Parámetros de Ruta:
  - id (integer): El ID de la beca.

- Respuesta Exitosa:

#+begin_src json
{
  "message": "Scholarship deleted successfully"
}
#+end_src

- Respuesta de Error:

#+begin_src json
{
  "message": "Scholarship not found"
}
#+end_src

** Seguridad

La configuración de seguridad se encuentra en el archivo ~SecurityConfig.java~. Actualmente, permite el acceso público al endpoint /users y requiere autenticación para cualquier otro endpoint.

** Contribuir

1. Haz un fork del proyecto.
2. Crea una nueva rama (~git checkout -b feature/nueva-funcionalidad~).
3. Realiza tus cambios y haz commit (~git commit -am 'Añadir nueva funcionalidad'~).
4. Sube tus cambios a la rama (~git push origin feature/nueva-funcionalidad~).
5. Abre un Pull Request.

** Licencia

Este proyecto está licenciado bajo la Licencia MIT. Consulta el archivo ~LICENSE~ para más detalles.